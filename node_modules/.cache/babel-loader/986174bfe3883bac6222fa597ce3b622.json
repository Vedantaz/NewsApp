{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mulev\\\\Desktop\\\\Custom OfficeWorks\\\\MERN_designer_Way\\\\newsapp\\\\src\\\\components\\\\News.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport NewsItem from './NewsItem';\nimport Spinner from './Spinner';\nimport PropTypes from 'prop-types';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst News = props => {\n  _s();\n\n  const apiKey = process.env.REACT_APP_NEWS_API;\n  const [articles, setArticles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [totalResults, setTotalResults] = useState(0);\n\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1); //   document.title = `${capitalizeFirstLetter(props.category)} - NewsSnake`;\n  };\n\n  const updateNews = async () => {\n    props.setProgress(10);\n    const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}&page=${page}&pageSize=${props.pageSize}`;\n    setLoading(true);\n    let data = await fetch(url);\n    props.setProgress(30); // await = if it takes more certain time then async-await function is used , if i wants to convert it into JSON or text then await is use.\n\n    let parsedData = await data.json();\n    props.setProgress(70);\n    setArticles(parsedData.articles);\n    setTotalResults(parsedData.totalResults);\n    setLoading(false);\n    props.setProgress(100);\n  };\n\n  useEffect(() => {\n    document.title = `${capitalizeFirstLetter(props.category)} - NewsSnake`;\n    updateNews();\n  }, []); // async  : wait to resolve some promises , after it'll run .\n\n  const fetchMoreData = async () => {\n    const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}`;\n    setPage(page + 1);\n    let data = await fetch(url);\n    let parsedData = await data.json();\n    setArticles(articles.concat(parsedData.articles));\n    setTotalResults(parsedData.totalResults);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      src: \"/NewsBack.png\",\n      style: {\n        backgroundColor: 'white',\n        color: 'black',\n        margin: '66px 0px'\n      },\n      children: [\"NewsSnake - Top \", capitalizeFirstLetter(props.category), \" Headlines  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: articles.length //This is important field to render the next data\n      ,\n      next: fetchMoreData,\n      hasMore: articles.length !== totalResults,\n      loader: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: articles.map(element => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4\",\n              children: /*#__PURE__*/_jsxDEV(NewsItem, {\n                title: element.title ? element.title : \"\",\n                description: element.description ? element.description.slice(0, 88) : \"\",\n                newsUrl: element.url,\n                imageurl: element.urlToImage,\n                author: element.author,\n                date: element.publishedAt,\n                source: element.source.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 33\n              }, this)\n            }, element.url, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(News, \"DJGT5z9fcO00SGn/4yt1PHL84Ps=\");\n\n_c = News;\nNews.defaultProps = {\n  country: 'in',\n  pageSize: 8,\n  category: 'general'\n};\nNews.propTypes = {\n  country: PropTypes.string,\n  pageSize: PropTypes.number,\n  country: PropTypes.string\n};\nexport default News;\n\nvar _c;\n\n$RefreshReg$(_c, \"News\");","map":{"version":3,"sources":["C:/Users/mulev/Desktop/Custom OfficeWorks/MERN_designer_Way/newsapp/src/components/News.js"],"names":["React","useEffect","useState","NewsItem","Spinner","PropTypes","InfiniteScroll","News","props","apiKey","process","env","REACT_APP_NEWS_API","articles","setArticles","loading","setLoading","page","setPage","totalResults","setTotalResults","capitalizeFirstLetter","string","charAt","toUpperCase","slice","updateNews","setProgress","url","country","category","pageSize","data","fetch","parsedData","json","document","title","fetchMoreData","concat","backgroundColor","color","margin","length","map","element","description","urlToImage","author","publishedAt","source","name","defaultProps","propTypes","number"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport NewsItem from './NewsItem';\r\nimport Spinner from './Spinner';\r\nimport PropTypes from 'prop-types';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nconst News = (props) => {\r\n    const apiKey = process.env.REACT_APP_NEWS_API\r\n    const [articles, setArticles] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [page, setPage] = useState(1)\r\n    const [totalResults, setTotalResults] = useState(0)\r\n    const capitalizeFirstLetter = (string) => {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n        //   document.title = `${capitalizeFirstLetter(props.category)} - NewsSnake`;\r\n    };\r\n    const updateNews = async () => {\r\n        props.setProgress(10);\r\n        const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}&page=${page}&pageSize=${props.pageSize}`;\r\n        setLoading(true);\r\n        let data = await fetch(url);\r\n        props.setProgress(30);\r\n        // await = if it takes more certain time then async-await function is used , if i wants to convert it into JSON or text then await is use.\r\n        let parsedData = await data.json()\r\n        props.setProgress(70);\r\n        setArticles(parsedData.articles)\r\n        setTotalResults(parsedData.totalResults)\r\n        setLoading(false);\r\n        props.setProgress(100);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.title = `${capitalizeFirstLetter(props.category)} - NewsSnake`;\r\n        updateNews();\r\n    }, [])\r\n    // async  : wait to resolve some promises , after it'll run .\r\n\r\n    const fetchMoreData = async () => {\r\n        const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}`;\r\n        setPage(page + 1);\r\n        let data = await fetch(url);\r\n        let parsedData = await data.json()\r\n        setArticles(articles.concat(parsedData.articles))\r\n        setTotalResults(parsedData.totalResults)\r\n    };\r\n    return (\r\n        <>\r\n            <h2 className=\"text-center\" src=\"/NewsBack.png\"\r\n                style={{ backgroundColor: 'white', color: 'black', margin: '66px 0px' }} >\r\n                NewsSnake - Top {capitalizeFirstLetter(props.category)} Headlines  </h2>\r\n            {loading && <Spinner />}\r\n            <InfiniteScroll\r\n                dataLength={articles.length} //This is important field to render the next data\r\n                next={fetchMoreData}\r\n                hasMore={articles.length !== totalResults}\r\n                loader={<Spinner />}>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        {articles.map((element) => {\r\n                            return <div className=\"col-md-4\" key={element.url}>\r\n                                <NewsItem title={element.title ? element.title : \"\"} description={element.description ? element.description.slice(0, 88) : \"\"} newsUrl={element.url} imageurl={element.urlToImage} author={element.author} date={element.publishedAt} source={element.source.name} />\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </InfiniteScroll>\r\n        </>\r\n    )\r\n\r\n};\r\nNews.defaultProps =\r\n{\r\n    country: 'in',\r\n    pageSize: 8,\r\n    category: 'general',\r\n}\r\nNews.propTypes = {\r\n    country: PropTypes.string,\r\n    pageSize: PropTypes.number,\r\n    country: PropTypes.string,\r\n}\r\nexport default News;"]},"metadata":{},"sourceType":"module"}