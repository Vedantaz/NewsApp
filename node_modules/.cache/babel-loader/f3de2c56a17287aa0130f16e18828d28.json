{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mulev\\\\Desktop\\\\Custom OfficeWorks\\\\designer_Way\\\\newsapp\\\\src\\\\components\\\\News.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport NewsItem from './NewsItem';\nimport Spinner from './Spinner';\nimport PropTypes from 'prop-types';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst News = props => {\n  _s();\n\n  const [articles, setArticles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [totalResults, setTotalResults] = useState(0);\n\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1); //   document.title = `${capitalizeFirstLetter(props.category)} - NewsSnake`;\n  };\n\n  const updateNews = async () => {\n    props.setProgress(10);\n    const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&sources=techcrunch&category=${props.category}&apiKey=${props.apiKey}&page=${state.page}&pageSize=${props.pageSize}`;\n    setState({\n      loading: true\n    });\n    let data = await fetch(url);\n    props.setProgress(30); // await = if i wants to convert it into JSON or text then await is use.\n\n    let parsedData = await data.json();\n    props.setProgress(70);\n    setArticles(parsed.articles);\n    setTotalResults(parsed.totalResults);\n    setLoading(false);\n    setState({\n      articles: parsedData.articles,\n      totalResults: parsedData.totalResults,\n      loading: false\n    });\n    props.setProgress(100);\n  };\n\n  useEffect(() => {\n    updateNews();\n  }, []); // async  : wait to resolve some promises , after it'll run .\n\n  const handlePrevClick = async () => {\n    seytPage(page - 1);\n    updateNews();\n  };\n\n  const handleNextClick = async () => {\n    setPage(page + 1);\n    updateNews();\n  };\n\n  fetchMoreData = async () => {\n    setPage(page + 1);\n    const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&sources=techcrunch&category=${props.category}&apiKey=${props.apiKey}&page=${state.page}&pageSize=${props.pageSize}`;\n    let data = await fetch(url);\n    let parsedData = await data.json();\n    setState({\n      articles: state.articles.concat(parsedData.articles),\n      totalResults: parsedData.totalResults\n    });\n  };\n};\n\n_s(News, \"DJGT5z9fcO00SGn/4yt1PHL84Ps=\");\n\n_c = News;\n\n/*#__PURE__*/\n_jsxDEV(_Fragment, {\n  children: [\"return (\", /*#__PURE__*/_jsxDEV(\"h2\", {\n    className: \"text-center\",\n    src: \"/NewsBack.png\",\n    style: {\n      backgroundColor: 'white',\n      color: 'black',\n      margin: '35px 0px'\n    },\n    children: [\"NewsSnake - Top \", capitalizeFirstLetter(props.category), \" Headlines  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this), state.loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 23\n  }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: state.articles.length //This is important field to render the next data\n    ,\n    next: fetchMoreData,\n    hasMore: state.articles.length !== state.totalResults,\n    loader: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: state.articles.map(element => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: /*#__PURE__*/_jsxDEV(NewsItem, {\n              title: element.title ? element.title : \"\",\n              description: element.description ? element.description.slice(0, 88) : \"\",\n              newsUrl: element.url,\n              imageurl: element.urlToImage,\n              author: element.author,\n              date: element.publishedAt,\n              source: element.source.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 25\n            }, this)\n          }, element.url, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this), \")\"]\n}, void 0, true);\n\nNews.defaultProps = {\n  country: 'in',\n  pageSize: 8,\n  category: 'general'\n};\nNews.propTypes = {\n  country: PropTypes.string,\n  pageSize: PropTypes.number,\n  country: PropTypes.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"News\");","map":{"version":3,"sources":["C:/Users/mulev/Desktop/Custom OfficeWorks/designer_Way/newsapp/src/components/News.js"],"names":["React","useEffect","useState","NewsItem","Spinner","PropTypes","InfiniteScroll","News","props","articles","setArticles","loading","setLoading","page","setPage","totalResults","setTotalResults","capitalizeFirstLetter","string","charAt","toUpperCase","slice","updateNews","setProgress","url","country","category","apiKey","state","pageSize","setState","data","fetch","parsedData","json","parsed","handlePrevClick","seytPage","handleNextClick","fetchMoreData","concat","backgroundColor","color","margin","length","map","element","title","description","urlToImage","author","publishedAt","source","name","defaultProps","propTypes","number"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport NewsItem from './NewsItem';\r\nimport Spinner from './Spinner';\r\nimport PropTypes from 'prop-types';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nconst News = (props) => {\r\n    const [articles, setArticles] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [page, setPage] = useState(1)\r\n    const [totalResults, setTotalResults] = useState(0)\r\n    const capitalizeFirstLetter = (string) => {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n        //   document.title = `${capitalizeFirstLetter(props.category)} - NewsSnake`;\r\n    };\r\n\r\n    const updateNews = async () => {\r\n        props.setProgress(10);\r\n        const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&sources=techcrunch&category=${props.category}&apiKey=${props.apiKey}&page=${state.page}&pageSize=${props.pageSize}`;\r\n        setState({ loading: true })\r\n        let data = await fetch(url);\r\n        props.setProgress(30);\r\n        // await = if i wants to convert it into JSON or text then await is use.\r\n        let parsedData = await data.json()\r\n        props.setProgress(70);\r\n        setArticles(parsed.articles)\r\n        setTotalResults(parsed.totalResults)\r\n        setLoading(false)\r\n        setState({\r\n            articles: parsedData.articles,\r\n            totalResults: parsedData.totalResults,\r\n            loading: false,\r\n        })\r\n        props.setProgress(100);\r\n\r\n\r\n    }\r\n    useEffect(() => {\r\n        updateNews();\r\n    }, [])\r\n    // async  : wait to resolve some promises , after it'll run .\r\n\r\n    const handlePrevClick = async () => {\r\n\r\n        seytPage(page - 1);\r\n        updateNews();\r\n    }\r\n    const handleNextClick = async () => {\r\n        setPage(page + 1);\r\n        updateNews();\r\n    }\r\n    fetchMoreData = async () => {\r\n        setPage(page + 1);\r\n        const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&sources=techcrunch&category=${props.category}&apiKey=${props.apiKey}&page=${state.page}&pageSize=${props.pageSize}`;\r\n\r\n\r\n        let data = await fetch(url);\r\n        let parsedData = await data.json()\r\n        setState({\r\n            articles: state.articles.concat(parsedData.articles),\r\n            totalResults: parsedData.totalResults,\r\n        })\r\n    };\r\n};\r\n\r\n\r\n<>\r\n    return (\r\n    <h2 className=\"text-center\" src=\"/NewsBack.png\"\r\n        style={{ backgroundColor: 'white', color: 'black', margin: '35px 0px' }} >\r\n        NewsSnake - Top {capitalizeFirstLetter(props.category)} Headlines  </h2>\r\n    {state.loading && <Spinner />}\r\n    <InfiniteScroll\r\n        dataLength={state.articles.length} //This is important field to render the next data\r\n        next={fetchMoreData}\r\n        hasMore={state.articles.length !== state.totalResults}\r\n        loader={<Spinner />}\r\n    >\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {state.articles.map((element) => {\r\n                    return <div className=\"col-md-4\" key={element.url}>\r\n                        <NewsItem title={element.title ? element.title : \"\"} description={element.description ? element.description.slice(0, 88) : \"\"} newsUrl={element.url} imageurl={element.urlToImage} author={element.author} date={element.publishedAt} source={element.source.name} />\r\n                    </div>\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </InfiniteScroll>\r\n    )\r\n</>\r\n\r\n\r\nNews.defaultProps =\r\n{\r\n    country: 'in',\r\n    pageSize: 8,\r\n    category: 'general',\r\n}\r\nNews.propTypes = {\r\n    country: PropTypes.string,\r\n    pageSize: PropTypes.number,\r\n    country: PropTypes.string,\r\n}"]},"metadata":{},"sourceType":"module"}